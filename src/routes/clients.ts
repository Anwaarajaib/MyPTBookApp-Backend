import express from 'express';
import { Client } from '../models/Client';
import { auth } from '../middleware/auth'; // Fixed auth import path
import multer from 'multer';

const router = express.Router();
const upload = multer();

// Get all clients for trainer
router.get('/', auth, async (req, res) => {
  try {
    const clients = await Client.find({ trainerId: (req as any).user.id }); // Type assertion to fix TypeScript error
    res.json(clients);
  } catch (error) {
    res.status(400).json({ error: 'Failed to fetch clients' });
  }
});

// Add new client with optional image
router.post('/', auth, upload.single('profileImage'), async (req, res) => {
  try {
    const { name, age, height, weight, medicalHistory, goalsNotes, id } = req.body;
    
    const client = new Client({
      id, // Use the UUID generated by iOS
      trainerId: (req as any).user.id, // Type assertion to fix TypeScript error
      name,
      age,
      height,
      weight,
      medicalHistory,
      goalsNotes,
      profileImageData: req.file?.buffer,
      sessions: []
    });
    
    await client.save();
    res.status(201).json(client);
  } catch (error) {
    res.status(400).json({ error: 'Failed to create client' });
  }
});
// Update client
router.put('/:id', auth, upload.single('profileImage'), async (req, res): Promise<void> => {
  try {
    const updateData = { ...req.body };
    if (req.file) {
      updateData.profileImageData = req.file.buffer;
    }
    const client = await Client.findOneAndUpdate(
      { id: req.params.id, trainerId: (req as any).user.id },
      updateData,
      { new: true }
    );
    if (!client) {
      res.status(404).json({ error: 'Client not found' });
      return;
    }

    res.json(client);
  } catch (error) {
    res.status(400).json({ error: 'Failed to update client' });
  }
});
// Add session to client
router.post('/:id/sessions', auth, async (req, res): Promise<void> => {
  try {
    const client = await Client.findOne({ 
      id: req.params.id, 
      trainerId: (req as any).user.id 
    });
    if (!client) {
      res.status(404).json({ error: 'Client not found' });
      return;
    }

    client.sessions.push(req.body);
    await client.save();
    res.status(201).json(client);
  } catch (error) {
    res.status(400).json({ error: 'Failed to add session' });
  }
});
// Update session
router.put('/:clientId/sessions/:sessionId', auth, async (req, res): Promise<void> => {
  try {
    const client = await Client.findOne({
      id: req.params.clientId,
      trainerId: (req as any).user.id
    });
    if (!client) {
      res.status(404).json({ error: 'Client not found' });
      return;
    }

    const sessionIndex = client.sessions.findIndex(
      session => session.id === req.params.sessionId
    );
    if (sessionIndex === -1) {
      res.status(404).json({ error: 'Session not found' });
      return;
    }

    client.sessions[sessionIndex] = {
      ...client.sessions[sessionIndex],
      ...req.body
    };

    await client.save();
    res.json(client);
  } catch (error) {
    res.status(400).json({ error: 'Failed to update session' });
  }
});

export default router; 